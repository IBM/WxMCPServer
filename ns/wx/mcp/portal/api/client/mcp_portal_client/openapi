openapi: 3.0.1
info:
  title: MCP-Portal-Client
  description: "## Model Context Protocol (MCP) Portal Client Overview\n\nThe **Model\
    \ Context Protocol (MCP) Portal Client** is a specialized API designed to securely\
    \ connect with the MCP Portal using provided credentials—either an API Key or\
    \ OAuth token. Its primary function is to introspect the Portal and retrieve the\
    \ APIs associated with a given API product.\n\n---\n\n### Key Features\n\n- **Secure\
    \ Authentication:**  \n  Utilizes API Key or OAuth token to authenticate requests,\
    \ ensuring that only authorized clients can access the portal and its resources.\n\
    \n- **API Discovery:**  \n  Introspects the MCP Portal to enumerate all APIs linked\
    \ to the specified API product, streamlining integration and management.\n\n-\
    \ **OpenAPI Metadata Extraction:**  \n  Enables the MCP server to extract essential\
    \ OpenAPI metadata, such as:\n  - API specifications\n  - Operation names\n  -\
    \ Data structures\n  - Other relevant schema details\n\n- **Integration with MCP\
    \ Tools:**  \n  The extracted metadata is mapped to MCP tools, making them readily\
    \ available for use by MCP hosts and applications.\n\n---\n\n### How It Works\n\
    \n1. **Authentication:**  \n   The Portal Client authenticates using the provided\
    \ credentials (API Key or OAuth token).\n\n2. **Introspection:**  \n   Upon successful\
    \ authentication, the client queries the MCP Portal to discover all APIs associated\
    \ with the target API product.\n\n3. **Metadata Extraction:**  \n   The MCP server\
    \ extracts OpenAPI metadata from the discovered APIs, including specifications\
    \ and operation details.\n\n4. **Tool Mapping:**  \n   The extracted information\
    \ is mapped to MCP tools, enabling seamless integration and usage within MCP hosts\
    \ and applications.\n\n---\n\n### Benefits\n\n- **Standardization:**  \n  Provides\
    \ a consistent, protocol-driven approach for connecting AI models and applications\
    \ to external APIs and systems.\n\n- **Interoperability:**  \n  Facilitates integration\
    \ across diverse tools and platforms, acting as a universal connector—often described\
    \ as the \"USB-C of AI apps\".\n\n- **Efficiency:**  \n  Automates the process\
    \ of API discovery and metadata extraction, reducing manual effort and potential\
    \ for error.\n\n---\n\n> **In summary:**  \n> The MCP Portal Client is a secure,\
    \ standards-based interface that automates the discovery and integration of APIs\
    \ within the MCP ecosystem, enabling AI applications to leverage a wide range\
    \ of external tools and data sources with minimal friction.\n\n"
  version: "1.0"
servers:
- url: https://demolab.apigw-az-eu.webmethods.io/gateway/MCP-Portal-Client/1.0
security:
- oAuth2Token: []
- apiKey: []
tags:
- name: mcp.ignore
paths:
  /productInfo:
    summary: /productInfo
    description: |-
      Get information about all APIs exposed by an API Gateway that constitute the tools for a particular MCP server.
      The MCP server is uniquely defined by its API Gateway endpoint(s) and the provided credentials (API Key or OAuth Token).
    get:
      description: |-
        Get information about all APIs exposed by an API Gateway that constitute the tools for a particular MCP server.
        The MCP server is uniquely defined by its API Gateway endpoint(s) and the provided credentials (API Key or OAuth Token).
      operationId: getServerDetails
      parameters: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInfo'
              examples: {}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":401,\"message\":\"Unauthorized: Missing or invalid\
                \ credentials\"}"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":404,\"message\":\"Not Found: The requested resource\
                \ does not exist\"}"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":500,\"message\":\"Internal Server Error: An unexpected\
                \ error occurred\"}"
  /files/{fileID}:
    summary: "/files/{fileID}"
    description: Download the Open API 3.x specification by file ID
    get:
      description: Download the Open API 3.x specification by file ID
      operationId: downloadOpenAPISpecificationByID
      parameters:
      - name: fileID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: fd3e932a-31cb-478c-ba9d-7aa62dfc0f79
          enum:
          - fd3e932a-31cb-478c-ba9d-7aa62dfc0f79
      responses:
        "200":
          description: Returns the OpenAPI specification in JSON format
          content:
            application/json:
              schema:
                type: object
                description: OpenAPI specification document
              examples: {}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":401,\"message\":\"Unauthorized: Missing or invalid\
                \ credentials\"}"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":404,\"message\":\"Not Found: The requested resource\
                \ does not exist\"}"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":500,\"message\":\"Internal Server Error: An unexpected\
                \ error occurred\"}"
  /apis/{apiID}:
    summary: "/apis/{apiID}"
    description: |-
      Get metadata about an API, in this context also known as a set of MCP "tools", identified by its unique ID.
      This request also provides the download URL for the OpenAPI 3.x specificatio
    get:
      description: |-
        Get metadata about an API, in this context also known as a set of MCP "tools", identified by its unique ID.
        This request also provides the download URL for the OpenAPI 3.x specificatio
      operationId: getAPIById
      parameters:
      - name: apiID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: d2b7c22a-c3b2-4280-b161-9fce4a5733cb
          enum:
          - d2b7c22a-c3b2-4280-b161-9fce4a5733cb
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMetadata'
              examples: {}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":401,\"message\":\"Unauthorized: Missing or invalid\
                \ credentials\"}"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":404,\"message\":\"Not Found: The requested resource\
                \ does not exist\"}"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: "{\"code\":500,\"message\":\"Internal Server Error: An unexpected\
                \ error occurred\"}"
components:
  schemas:
    ProductInfo:
      required:
      - apis
      - applicationID
      - gatewayPID
      - name
      type: object
      properties:
        apis:
          type: array
          items:
            type: string
            format: uuid
        name:
          type: string
        description:
          type: string
        portalPID:
          type: string
          format: uuid
        gatewayPID:
          type: string
          format: uuid
        applicationID:
          type: string
        applicationName:
          type: string
    ApiMetadata:
      required:
      - attachments
      - endPoints
      - id
      - name
      - owner
      - providerRef
      - tags
      - version
      type: object
      properties:
        owner:
          type: string
          format: uuid
        providerRef:
          type: string
          format: uuid
        attachments:
          type: array
          items:
            required:
            - name
            - uri
            type: object
            properties:
              name:
                type: string
              uri:
                type: string
        name:
          type: string
        description:
          type: string
        id:
          type: string
          format: uuid
        version:
          type: string
        endPoints:
          type: array
          items:
            required:
            - baseUrl
            - name
            type: object
            properties:
              baseUrl:
                type: string
              name:
                type: string
        tags:
          type: array
          items:
            type: string
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          format: int32
          example: 401
        message:
          type: string
          description: Error message
          example: Unauthorized
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    oAuth2Token:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://demolab.apigw-az-eu.webmethods.io/invoke/pub.apigateway.oauth2/authorize
          scopes:
            mcp.tools.call: Invoke APIs as MCP tools
            mcp.tools.list: Invoke APIs as MCP tools
        password:
          tokenUrl: https://demolab.apigw-az-eu.webmethods.io/invoke/pub.apigateway.oauth2/getAccessToken
          scopes:
            mcp.tools.call: Invoke APIs as MCP tools
            mcp.tools.list: Invoke APIs as MCP tools
        clientCredentials:
          tokenUrl: https://demolab.apigw-az-eu.webmethods.io/invoke/pub.apigateway.oauth2/getAccessToken
          scopes:
            mcp.tools.call: Invoke APIs as MCP tools
            mcp.tools.list: Invoke APIs as MCP tools
        authorizationCode:
          authorizationUrl: https://demolab.apigw-az-eu.webmethods.io/invoke/pub.apigateway.oauth2/authorize
          tokenUrl: https://demolab.apigw-az-eu.webmethods.io/invoke/pub.apigateway.oauth2/getAccessToken
          scopes:
            mcp.tools.call: Invoke APIs as MCP tools
            mcp.tools.list: Invoke APIs as MCP tools
    apiKey:
      type: apiKey
      name: x-Gateway-APIKey
      in: header
  links: {}
  callbacks: {}
